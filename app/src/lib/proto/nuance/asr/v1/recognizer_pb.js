// source: nuance/asr/v1/recognizer.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var nuance_asr_v1_resource_pb = require('../../../nuance/asr/v1/resource_pb.js');
goog.object.extend(proto, nuance_asr_v1_resource_pb);
var nuance_asr_v1_result_pb = require('../../../nuance/asr/v1/result_pb.js');
goog.object.extend(proto, nuance_asr_v1_result_pb);
goog.exportSymbol('proto.nuance.asr.v1.ALaw', null, global);
goog.exportSymbol('proto.nuance.asr.v1.AudioFormat', null, global);
goog.exportSymbol('proto.nuance.asr.v1.AudioFormat.AudioFormatUnionCase', null, global);
goog.exportSymbol('proto.nuance.asr.v1.ControlMessage', null, global);
goog.exportSymbol('proto.nuance.asr.v1.ControlMessage.ControlMessageUnionCase', null, global);
goog.exportSymbol('proto.nuance.asr.v1.EnumUtteranceDetectionMode', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Formatting', null, global);
goog.exportSymbol('proto.nuance.asr.v1.OggOpus', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Opus', null, global);
goog.exportSymbol('proto.nuance.asr.v1.PCM', null, global);
goog.exportSymbol('proto.nuance.asr.v1.RecognitionFlags', null, global);
goog.exportSymbol('proto.nuance.asr.v1.RecognitionInitMessage', null, global);
goog.exportSymbol('proto.nuance.asr.v1.RecognitionParameters', null, global);
goog.exportSymbol('proto.nuance.asr.v1.RecognitionParameters.OptionalSpeechDetectionSensitivityCase', null, global);
goog.exportSymbol('proto.nuance.asr.v1.RecognitionRequest', null, global);
goog.exportSymbol('proto.nuance.asr.v1.RecognitionRequest.RequestUnionCase', null, global);
goog.exportSymbol('proto.nuance.asr.v1.RecognitionResponse', null, global);
goog.exportSymbol('proto.nuance.asr.v1.RecognitionResponse.ResponseUnionCase', null, global);
goog.exportSymbol('proto.nuance.asr.v1.StartOfSpeech', null, global);
goog.exportSymbol('proto.nuance.asr.v1.StartTimersControlMessage', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Status', null, global);
goog.exportSymbol('proto.nuance.asr.v1.ULaw', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.RecognitionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.asr.v1.RecognitionRequest.oneofGroups_);
};
goog.inherits(proto.nuance.asr.v1.RecognitionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.RecognitionRequest.displayName = 'proto.nuance.asr.v1.RecognitionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.RecognitionInitMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.asr.v1.RecognitionInitMessage.repeatedFields_, null);
};
goog.inherits(proto.nuance.asr.v1.RecognitionInitMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.RecognitionInitMessage.displayName = 'proto.nuance.asr.v1.RecognitionInitMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.RecognitionParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.asr.v1.RecognitionParameters.oneofGroups_);
};
goog.inherits(proto.nuance.asr.v1.RecognitionParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.RecognitionParameters.displayName = 'proto.nuance.asr.v1.RecognitionParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.AudioFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.asr.v1.AudioFormat.oneofGroups_);
};
goog.inherits(proto.nuance.asr.v1.AudioFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.AudioFormat.displayName = 'proto.nuance.asr.v1.AudioFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.PCM = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.PCM, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.PCM.displayName = 'proto.nuance.asr.v1.PCM';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.ALaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.ALaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.ALaw.displayName = 'proto.nuance.asr.v1.ALaw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.ULaw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.ULaw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.ULaw.displayName = 'proto.nuance.asr.v1.ULaw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.Opus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.Opus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.Opus.displayName = 'proto.nuance.asr.v1.Opus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.OggOpus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.OggOpus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.OggOpus.displayName = 'proto.nuance.asr.v1.OggOpus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.RecognitionFlags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.RecognitionFlags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.RecognitionFlags.displayName = 'proto.nuance.asr.v1.RecognitionFlags';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.Formatting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.Formatting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.Formatting.displayName = 'proto.nuance.asr.v1.Formatting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.ControlMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.asr.v1.ControlMessage.oneofGroups_);
};
goog.inherits(proto.nuance.asr.v1.ControlMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.ControlMessage.displayName = 'proto.nuance.asr.v1.ControlMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.StartTimersControlMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.StartTimersControlMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.StartTimersControlMessage.displayName = 'proto.nuance.asr.v1.StartTimersControlMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.RecognitionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.asr.v1.RecognitionResponse.oneofGroups_);
};
goog.inherits(proto.nuance.asr.v1.RecognitionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.RecognitionResponse.displayName = 'proto.nuance.asr.v1.RecognitionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.Status.displayName = 'proto.nuance.asr.v1.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.StartOfSpeech = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.StartOfSpeech, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.StartOfSpeech.displayName = 'proto.nuance.asr.v1.StartOfSpeech';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.asr.v1.RecognitionRequest.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.nuance.asr.v1.RecognitionRequest.RequestUnionCase = {
  REQUEST_UNION_NOT_SET: 0,
  RECOGNITION_INIT_MESSAGE: 1,
  CONTROL_MESSAGE: 2,
  AUDIO: 3
};

/**
 * @return {proto.nuance.asr.v1.RecognitionRequest.RequestUnionCase}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.getRequestUnionCase = function() {
  return /** @type {proto.nuance.asr.v1.RecognitionRequest.RequestUnionCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.RecognitionRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.RecognitionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.RecognitionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recognitionInitMessage: (f = msg.getRecognitionInitMessage()) && proto.nuance.asr.v1.RecognitionInitMessage.toObject(includeInstance, f),
    controlMessage: (f = msg.getControlMessage()) && proto.nuance.asr.v1.ControlMessage.toObject(includeInstance, f),
    audio: msg.getAudio_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.RecognitionRequest}
 */
proto.nuance.asr.v1.RecognitionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.RecognitionRequest;
  return proto.nuance.asr.v1.RecognitionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.RecognitionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.RecognitionRequest}
 */
proto.nuance.asr.v1.RecognitionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.asr.v1.RecognitionInitMessage;
      reader.readMessage(value,proto.nuance.asr.v1.RecognitionInitMessage.deserializeBinaryFromReader);
      msg.setRecognitionInitMessage(value);
      break;
    case 2:
      var value = new proto.nuance.asr.v1.ControlMessage;
      reader.readMessage(value,proto.nuance.asr.v1.ControlMessage.deserializeBinaryFromReader);
      msg.setControlMessage(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAudio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.RecognitionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.RecognitionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecognitionInitMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.asr.v1.RecognitionInitMessage.serializeBinaryToWriter
    );
  }
  f = message.getControlMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nuance.asr.v1.ControlMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional RecognitionInitMessage recognition_init_message = 1;
 * @return {?proto.nuance.asr.v1.RecognitionInitMessage}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.getRecognitionInitMessage = function() {
  return /** @type{?proto.nuance.asr.v1.RecognitionInitMessage} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.RecognitionInitMessage, 1));
};


/**
 * @param {?proto.nuance.asr.v1.RecognitionInitMessage|undefined} value
 * @return {!proto.nuance.asr.v1.RecognitionRequest} returns this
*/
proto.nuance.asr.v1.RecognitionRequest.prototype.setRecognitionInitMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nuance.asr.v1.RecognitionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionRequest} returns this
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.clearRecognitionInitMessage = function() {
  return this.setRecognitionInitMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.hasRecognitionInitMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ControlMessage control_message = 2;
 * @return {?proto.nuance.asr.v1.ControlMessage}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.getControlMessage = function() {
  return /** @type{?proto.nuance.asr.v1.ControlMessage} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.ControlMessage, 2));
};


/**
 * @param {?proto.nuance.asr.v1.ControlMessage|undefined} value
 * @return {!proto.nuance.asr.v1.RecognitionRequest} returns this
*/
proto.nuance.asr.v1.RecognitionRequest.prototype.setControlMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nuance.asr.v1.RecognitionRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionRequest} returns this
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.clearControlMessage = function() {
  return this.setControlMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.hasControlMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes audio = 3;
 * @return {!(string|Uint8Array)}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.getAudio = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes audio = 3;
 * This is a type-conversion wrapper around `getAudio()`
 * @return {string}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.getAudio_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAudio()));
};


/**
 * optional bytes audio = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAudio()`
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.getAudio_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAudio()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.nuance.asr.v1.RecognitionRequest} returns this
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.setAudio = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.nuance.asr.v1.RecognitionRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionRequest} returns this
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.clearAudio = function() {
  return jspb.Message.setOneofField(this, 3, proto.nuance.asr.v1.RecognitionRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionRequest.prototype.hasAudio = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.asr.v1.RecognitionInitMessage.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.RecognitionInitMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.RecognitionInitMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionInitMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    parameters: (f = msg.getParameters()) && proto.nuance.asr.v1.RecognitionParameters.toObject(includeInstance, f),
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    nuance_asr_v1_resource_pb.RecognitionResource.toObject, includeInstance),
    clientDataMap: (f = msg.getClientDataMap()) ? f.toObject(includeInstance, undefined) : [],
    userId: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.RecognitionInitMessage}
 */
proto.nuance.asr.v1.RecognitionInitMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.RecognitionInitMessage;
  return proto.nuance.asr.v1.RecognitionInitMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.RecognitionInitMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.RecognitionInitMessage}
 */
proto.nuance.asr.v1.RecognitionInitMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.asr.v1.RecognitionParameters;
      reader.readMessage(value,proto.nuance.asr.v1.RecognitionParameters.deserializeBinaryFromReader);
      msg.setParameters(value);
      break;
    case 2:
      var value = new nuance_asr_v1_resource_pb.RecognitionResource;
      reader.readMessage(value,nuance_asr_v1_resource_pb.RecognitionResource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    case 3:
      var value = msg.getClientDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.RecognitionInitMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.RecognitionInitMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionInitMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParameters();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.asr.v1.RecognitionParameters.serializeBinaryToWriter
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      nuance_asr_v1_resource_pb.RecognitionResource.serializeBinaryToWriter
    );
  }
  f = message.getClientDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional RecognitionParameters parameters = 1;
 * @return {?proto.nuance.asr.v1.RecognitionParameters}
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.getParameters = function() {
  return /** @type{?proto.nuance.asr.v1.RecognitionParameters} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.RecognitionParameters, 1));
};


/**
 * @param {?proto.nuance.asr.v1.RecognitionParameters|undefined} value
 * @return {!proto.nuance.asr.v1.RecognitionInitMessage} returns this
*/
proto.nuance.asr.v1.RecognitionInitMessage.prototype.setParameters = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionInitMessage} returns this
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.clearParameters = function() {
  return this.setParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.hasParameters = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated RecognitionResource resources = 2;
 * @return {!Array<!proto.nuance.asr.v1.RecognitionResource>}
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.nuance.asr.v1.RecognitionResource>} */ (
    jspb.Message.getRepeatedWrapperField(this, nuance_asr_v1_resource_pb.RecognitionResource, 2));
};


/**
 * @param {!Array<!proto.nuance.asr.v1.RecognitionResource>} value
 * @return {!proto.nuance.asr.v1.RecognitionInitMessage} returns this
*/
proto.nuance.asr.v1.RecognitionInitMessage.prototype.setResourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nuance.asr.v1.RecognitionResource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.asr.v1.RecognitionResource}
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nuance.asr.v1.RecognitionResource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuance.asr.v1.RecognitionInitMessage} returns this
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.clearResourcesList = function() {
  return this.setResourcesList([]);
};


/**
 * map<string, string> client_data = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.getClientDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.asr.v1.RecognitionInitMessage} returns this
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.clearClientDataMap = function() {
  this.getClientDataMap().clear();
  return this;};


/**
 * optional string user_id = 4;
 * @return {string}
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.RecognitionInitMessage} returns this
 */
proto.nuance.asr.v1.RecognitionInitMessage.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.asr.v1.RecognitionParameters.oneofGroups_ = [[10]];

/**
 * @enum {number}
 */
proto.nuance.asr.v1.RecognitionParameters.OptionalSpeechDetectionSensitivityCase = {
  OPTIONAL_SPEECH_DETECTION_SENSITIVITY_NOT_SET: 0,
  SPEECH_DETECTION_SENSITIVITY: 10
};

/**
 * @return {proto.nuance.asr.v1.RecognitionParameters.OptionalSpeechDetectionSensitivityCase}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getOptionalSpeechDetectionSensitivityCase = function() {
  return /** @type {proto.nuance.asr.v1.RecognitionParameters.OptionalSpeechDetectionSensitivityCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.RecognitionParameters.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.RecognitionParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.RecognitionParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
    audioFormat: (f = msg.getAudioFormat()) && proto.nuance.asr.v1.AudioFormat.toObject(includeInstance, f),
    utteranceDetectionMode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    resultType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    recognitionFlags: (f = msg.getRecognitionFlags()) && proto.nuance.asr.v1.RecognitionFlags.toObject(includeInstance, f),
    noInputTimeoutMs: jspb.Message.getFieldWithDefault(msg, 7, 0),
    recognitionTimeoutMs: jspb.Message.getFieldWithDefault(msg, 8, 0),
    utteranceEndSilenceMs: jspb.Message.getFieldWithDefault(msg, 9, 0),
    speechDetectionSensitivity: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    maxHypotheses: jspb.Message.getFieldWithDefault(msg, 11, 0),
    speechDomain: jspb.Message.getFieldWithDefault(msg, 15, ""),
    formatting: (f = msg.getFormatting()) && proto.nuance.asr.v1.Formatting.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.RecognitionParameters}
 */
proto.nuance.asr.v1.RecognitionParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.RecognitionParameters;
  return proto.nuance.asr.v1.RecognitionParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.RecognitionParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.RecognitionParameters}
 */
proto.nuance.asr.v1.RecognitionParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = new proto.nuance.asr.v1.AudioFormat;
      reader.readMessage(value,proto.nuance.asr.v1.AudioFormat.deserializeBinaryFromReader);
      msg.setAudioFormat(value);
      break;
    case 4:
      var value = /** @type {!proto.nuance.asr.v1.EnumUtteranceDetectionMode} */ (reader.readEnum());
      msg.setUtteranceDetectionMode(value);
      break;
    case 5:
      var value = /** @type {!proto.nuance.asr.v1.EnumResultType} */ (reader.readEnum());
      msg.setResultType(value);
      break;
    case 6:
      var value = new proto.nuance.asr.v1.RecognitionFlags;
      reader.readMessage(value,proto.nuance.asr.v1.RecognitionFlags.deserializeBinaryFromReader);
      msg.setRecognitionFlags(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNoInputTimeoutMs(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRecognitionTimeoutMs(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUtteranceEndSilenceMs(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeechDetectionSensitivity(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxHypotheses(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeechDomain(value);
      break;
    case 16:
      var value = new proto.nuance.asr.v1.Formatting;
      reader.readMessage(value,proto.nuance.asr.v1.Formatting.deserializeBinaryFromReader);
      msg.setFormatting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.RecognitionParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.RecognitionParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAudioFormat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nuance.asr.v1.AudioFormat.serializeBinaryToWriter
    );
  }
  f = message.getUtteranceDetectionMode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getResultType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getRecognitionFlags();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nuance.asr.v1.RecognitionFlags.serializeBinaryToWriter
    );
  }
  f = message.getNoInputTimeoutMs();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getRecognitionTimeoutMs();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getUtteranceEndSilenceMs();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getMaxHypotheses();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getSpeechDomain();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getFormatting();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.nuance.asr.v1.Formatting.serializeBinaryToWriter
    );
  }
};


/**
 * optional string language = 1;
 * @return {string}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional AudioFormat audio_format = 3;
 * @return {?proto.nuance.asr.v1.AudioFormat}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getAudioFormat = function() {
  return /** @type{?proto.nuance.asr.v1.AudioFormat} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.AudioFormat, 3));
};


/**
 * @param {?proto.nuance.asr.v1.AudioFormat|undefined} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
*/
proto.nuance.asr.v1.RecognitionParameters.prototype.setAudioFormat = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.clearAudioFormat = function() {
  return this.setAudioFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.hasAudioFormat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EnumUtteranceDetectionMode utterance_detection_mode = 4;
 * @return {!proto.nuance.asr.v1.EnumUtteranceDetectionMode}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getUtteranceDetectionMode = function() {
  return /** @type {!proto.nuance.asr.v1.EnumUtteranceDetectionMode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.nuance.asr.v1.EnumUtteranceDetectionMode} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setUtteranceDetectionMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional EnumResultType result_type = 5;
 * @return {!proto.nuance.asr.v1.EnumResultType}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getResultType = function() {
  return /** @type {!proto.nuance.asr.v1.EnumResultType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.nuance.asr.v1.EnumResultType} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setResultType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional RecognitionFlags recognition_flags = 6;
 * @return {?proto.nuance.asr.v1.RecognitionFlags}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getRecognitionFlags = function() {
  return /** @type{?proto.nuance.asr.v1.RecognitionFlags} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.RecognitionFlags, 6));
};


/**
 * @param {?proto.nuance.asr.v1.RecognitionFlags|undefined} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
*/
proto.nuance.asr.v1.RecognitionParameters.prototype.setRecognitionFlags = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.clearRecognitionFlags = function() {
  return this.setRecognitionFlags(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.hasRecognitionFlags = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 no_input_timeout_ms = 7;
 * @return {number}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getNoInputTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setNoInputTimeoutMs = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 recognition_timeout_ms = 8;
 * @return {number}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getRecognitionTimeoutMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setRecognitionTimeoutMs = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint32 utterance_end_silence_ms = 9;
 * @return {number}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getUtteranceEndSilenceMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setUtteranceEndSilenceMs = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional float speech_detection_sensitivity = 10;
 * @return {number}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getSpeechDetectionSensitivity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setSpeechDetectionSensitivity = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.nuance.asr.v1.RecognitionParameters.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.clearSpeechDetectionSensitivity = function() {
  return jspb.Message.setOneofField(this, 10, proto.nuance.asr.v1.RecognitionParameters.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.hasSpeechDetectionSensitivity = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 max_hypotheses = 11;
 * @return {number}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getMaxHypotheses = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setMaxHypotheses = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string speech_domain = 15;
 * @return {string}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getSpeechDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.setSpeechDomain = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional Formatting formatting = 16;
 * @return {?proto.nuance.asr.v1.Formatting}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.getFormatting = function() {
  return /** @type{?proto.nuance.asr.v1.Formatting} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.Formatting, 16));
};


/**
 * @param {?proto.nuance.asr.v1.Formatting|undefined} value
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
*/
proto.nuance.asr.v1.RecognitionParameters.prototype.setFormatting = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionParameters} returns this
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.clearFormatting = function() {
  return this.setFormatting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionParameters.prototype.hasFormatting = function() {
  return jspb.Message.getField(this, 16) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.asr.v1.AudioFormat.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.nuance.asr.v1.AudioFormat.AudioFormatUnionCase = {
  AUDIO_FORMAT_UNION_NOT_SET: 0,
  PCM: 1,
  ALAW: 2,
  ULAW: 3,
  OPUS: 4,
  OGG_OPUS: 5
};

/**
 * @return {proto.nuance.asr.v1.AudioFormat.AudioFormatUnionCase}
 */
proto.nuance.asr.v1.AudioFormat.prototype.getAudioFormatUnionCase = function() {
  return /** @type {proto.nuance.asr.v1.AudioFormat.AudioFormatUnionCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.AudioFormat.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.AudioFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.AudioFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.AudioFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.AudioFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    pcm: (f = msg.getPcm()) && proto.nuance.asr.v1.PCM.toObject(includeInstance, f),
    alaw: (f = msg.getAlaw()) && proto.nuance.asr.v1.ALaw.toObject(includeInstance, f),
    ulaw: (f = msg.getUlaw()) && proto.nuance.asr.v1.ULaw.toObject(includeInstance, f),
    opus: (f = msg.getOpus()) && proto.nuance.asr.v1.Opus.toObject(includeInstance, f),
    oggOpus: (f = msg.getOggOpus()) && proto.nuance.asr.v1.OggOpus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.AudioFormat}
 */
proto.nuance.asr.v1.AudioFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.AudioFormat;
  return proto.nuance.asr.v1.AudioFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.AudioFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.AudioFormat}
 */
proto.nuance.asr.v1.AudioFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.asr.v1.PCM;
      reader.readMessage(value,proto.nuance.asr.v1.PCM.deserializeBinaryFromReader);
      msg.setPcm(value);
      break;
    case 2:
      var value = new proto.nuance.asr.v1.ALaw;
      reader.readMessage(value,proto.nuance.asr.v1.ALaw.deserializeBinaryFromReader);
      msg.setAlaw(value);
      break;
    case 3:
      var value = new proto.nuance.asr.v1.ULaw;
      reader.readMessage(value,proto.nuance.asr.v1.ULaw.deserializeBinaryFromReader);
      msg.setUlaw(value);
      break;
    case 4:
      var value = new proto.nuance.asr.v1.Opus;
      reader.readMessage(value,proto.nuance.asr.v1.Opus.deserializeBinaryFromReader);
      msg.setOpus(value);
      break;
    case 5:
      var value = new proto.nuance.asr.v1.OggOpus;
      reader.readMessage(value,proto.nuance.asr.v1.OggOpus.deserializeBinaryFromReader);
      msg.setOggOpus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.AudioFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.AudioFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.AudioFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.AudioFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPcm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.asr.v1.PCM.serializeBinaryToWriter
    );
  }
  f = message.getAlaw();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nuance.asr.v1.ALaw.serializeBinaryToWriter
    );
  }
  f = message.getUlaw();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nuance.asr.v1.ULaw.serializeBinaryToWriter
    );
  }
  f = message.getOpus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nuance.asr.v1.Opus.serializeBinaryToWriter
    );
  }
  f = message.getOggOpus();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nuance.asr.v1.OggOpus.serializeBinaryToWriter
    );
  }
};


/**
 * optional PCM pcm = 1;
 * @return {?proto.nuance.asr.v1.PCM}
 */
proto.nuance.asr.v1.AudioFormat.prototype.getPcm = function() {
  return /** @type{?proto.nuance.asr.v1.PCM} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.PCM, 1));
};


/**
 * @param {?proto.nuance.asr.v1.PCM|undefined} value
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
*/
proto.nuance.asr.v1.AudioFormat.prototype.setPcm = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nuance.asr.v1.AudioFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
 */
proto.nuance.asr.v1.AudioFormat.prototype.clearPcm = function() {
  return this.setPcm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.AudioFormat.prototype.hasPcm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ALaw alaw = 2;
 * @return {?proto.nuance.asr.v1.ALaw}
 */
proto.nuance.asr.v1.AudioFormat.prototype.getAlaw = function() {
  return /** @type{?proto.nuance.asr.v1.ALaw} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.ALaw, 2));
};


/**
 * @param {?proto.nuance.asr.v1.ALaw|undefined} value
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
*/
proto.nuance.asr.v1.AudioFormat.prototype.setAlaw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nuance.asr.v1.AudioFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
 */
proto.nuance.asr.v1.AudioFormat.prototype.clearAlaw = function() {
  return this.setAlaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.AudioFormat.prototype.hasAlaw = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ULaw ulaw = 3;
 * @return {?proto.nuance.asr.v1.ULaw}
 */
proto.nuance.asr.v1.AudioFormat.prototype.getUlaw = function() {
  return /** @type{?proto.nuance.asr.v1.ULaw} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.ULaw, 3));
};


/**
 * @param {?proto.nuance.asr.v1.ULaw|undefined} value
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
*/
proto.nuance.asr.v1.AudioFormat.prototype.setUlaw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nuance.asr.v1.AudioFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
 */
proto.nuance.asr.v1.AudioFormat.prototype.clearUlaw = function() {
  return this.setUlaw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.AudioFormat.prototype.hasUlaw = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Opus opus = 4;
 * @return {?proto.nuance.asr.v1.Opus}
 */
proto.nuance.asr.v1.AudioFormat.prototype.getOpus = function() {
  return /** @type{?proto.nuance.asr.v1.Opus} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.Opus, 4));
};


/**
 * @param {?proto.nuance.asr.v1.Opus|undefined} value
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
*/
proto.nuance.asr.v1.AudioFormat.prototype.setOpus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.nuance.asr.v1.AudioFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
 */
proto.nuance.asr.v1.AudioFormat.prototype.clearOpus = function() {
  return this.setOpus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.AudioFormat.prototype.hasOpus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OggOpus ogg_opus = 5;
 * @return {?proto.nuance.asr.v1.OggOpus}
 */
proto.nuance.asr.v1.AudioFormat.prototype.getOggOpus = function() {
  return /** @type{?proto.nuance.asr.v1.OggOpus} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.OggOpus, 5));
};


/**
 * @param {?proto.nuance.asr.v1.OggOpus|undefined} value
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
*/
proto.nuance.asr.v1.AudioFormat.prototype.setOggOpus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.nuance.asr.v1.AudioFormat.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.AudioFormat} returns this
 */
proto.nuance.asr.v1.AudioFormat.prototype.clearOggOpus = function() {
  return this.setOggOpus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.AudioFormat.prototype.hasOggOpus = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.PCM.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.PCM.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.PCM} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.PCM.toObject = function(includeInstance, msg) {
  var f, obj = {
    sampleRateHz: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.PCM}
 */
proto.nuance.asr.v1.PCM.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.PCM;
  return proto.nuance.asr.v1.PCM.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.PCM} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.PCM}
 */
proto.nuance.asr.v1.PCM.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSampleRateHz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.PCM.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.PCM.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.PCM} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.PCM.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSampleRateHz();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 sample_rate_hz = 1;
 * @return {number}
 */
proto.nuance.asr.v1.PCM.prototype.getSampleRateHz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.PCM} returns this
 */
proto.nuance.asr.v1.PCM.prototype.setSampleRateHz = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.ALaw.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.ALaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.ALaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.ALaw.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.ALaw}
 */
proto.nuance.asr.v1.ALaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.ALaw;
  return proto.nuance.asr.v1.ALaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.ALaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.ALaw}
 */
proto.nuance.asr.v1.ALaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.ALaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.ALaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.ALaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.ALaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.ULaw.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.ULaw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.ULaw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.ULaw.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.ULaw}
 */
proto.nuance.asr.v1.ULaw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.ULaw;
  return proto.nuance.asr.v1.ULaw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.ULaw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.ULaw}
 */
proto.nuance.asr.v1.ULaw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.ULaw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.ULaw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.ULaw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.ULaw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.Opus.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.Opus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.Opus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Opus.toObject = function(includeInstance, msg) {
  var f, obj = {
    decodeRateHz: jspb.Message.getFieldWithDefault(msg, 1, 0),
    preskipSamples: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sourceRateHz: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.Opus}
 */
proto.nuance.asr.v1.Opus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.Opus;
  return proto.nuance.asr.v1.Opus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.Opus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.Opus}
 */
proto.nuance.asr.v1.Opus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecodeRateHz(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPreskipSamples(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourceRateHz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.Opus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.Opus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.Opus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Opus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecodeRateHz();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPreskipSamples();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSourceRateHz();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 decode_rate_hz = 1;
 * @return {number}
 */
proto.nuance.asr.v1.Opus.prototype.getDecodeRateHz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Opus} returns this
 */
proto.nuance.asr.v1.Opus.prototype.setDecodeRateHz = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 preskip_samples = 2;
 * @return {number}
 */
proto.nuance.asr.v1.Opus.prototype.getPreskipSamples = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Opus} returns this
 */
proto.nuance.asr.v1.Opus.prototype.setPreskipSamples = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 source_rate_hz = 3;
 * @return {number}
 */
proto.nuance.asr.v1.Opus.prototype.getSourceRateHz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Opus} returns this
 */
proto.nuance.asr.v1.Opus.prototype.setSourceRateHz = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.OggOpus.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.OggOpus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.OggOpus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.OggOpus.toObject = function(includeInstance, msg) {
  var f, obj = {
    decodeRateHz: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.OggOpus}
 */
proto.nuance.asr.v1.OggOpus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.OggOpus;
  return proto.nuance.asr.v1.OggOpus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.OggOpus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.OggOpus}
 */
proto.nuance.asr.v1.OggOpus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecodeRateHz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.OggOpus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.OggOpus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.OggOpus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.OggOpus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDecodeRateHz();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 decode_rate_hz = 1;
 * @return {number}
 */
proto.nuance.asr.v1.OggOpus.prototype.getDecodeRateHz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.OggOpus} returns this
 */
proto.nuance.asr.v1.OggOpus.prototype.setDecodeRateHz = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.RecognitionFlags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.RecognitionFlags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionFlags.toObject = function(includeInstance, msg) {
  var f, obj = {
    autoPunctuate: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    filterProfanity: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    includeTokenization: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    stallTimers: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    discardSpeakerAdaptation: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    suppressCallRecording: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    maskLoadFailures: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    suppressInitialCapitalization: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    allowZeroBaseLmWeight: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    filterWakeupWord: jspb.Message.getBooleanFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.RecognitionFlags}
 */
proto.nuance.asr.v1.RecognitionFlags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.RecognitionFlags;
  return proto.nuance.asr.v1.RecognitionFlags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.RecognitionFlags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.RecognitionFlags}
 */
proto.nuance.asr.v1.RecognitionFlags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoPunctuate(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilterProfanity(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeTokenization(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStallTimers(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiscardSpeakerAdaptation(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuppressCallRecording(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMaskLoadFailures(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuppressInitialCapitalization(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowZeroBaseLmWeight(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFilterWakeupWord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.RecognitionFlags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.RecognitionFlags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionFlags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAutoPunctuate();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getFilterProfanity();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIncludeTokenization();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getStallTimers();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDiscardSpeakerAdaptation();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getSuppressCallRecording();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getMaskLoadFailures();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getSuppressInitialCapitalization();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getAllowZeroBaseLmWeight();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getFilterWakeupWord();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional bool auto_punctuate = 1;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getAutoPunctuate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setAutoPunctuate = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool filter_profanity = 2;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getFilterProfanity = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setFilterProfanity = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool include_tokenization = 3;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getIncludeTokenization = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setIncludeTokenization = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool stall_timers = 4;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getStallTimers = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setStallTimers = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool discard_speaker_adaptation = 5;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getDiscardSpeakerAdaptation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setDiscardSpeakerAdaptation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool suppress_call_recording = 6;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getSuppressCallRecording = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setSuppressCallRecording = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool mask_load_failures = 7;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getMaskLoadFailures = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setMaskLoadFailures = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool suppress_initial_capitalization = 8;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getSuppressInitialCapitalization = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setSuppressInitialCapitalization = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool allow_zero_base_lm_weight = 9;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getAllowZeroBaseLmWeight = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setAllowZeroBaseLmWeight = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool filter_wakeup_word = 10;
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.getFilterWakeupWord = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.RecognitionFlags} returns this
 */
proto.nuance.asr.v1.RecognitionFlags.prototype.setFilterWakeupWord = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.Formatting.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.Formatting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.Formatting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Formatting.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheme: jspb.Message.getFieldWithDefault(msg, 1, ""),
    optionsMap: (f = msg.getOptionsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.Formatting}
 */
proto.nuance.asr.v1.Formatting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.Formatting;
  return proto.nuance.asr.v1.Formatting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.Formatting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.Formatting}
 */
proto.nuance.asr.v1.Formatting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScheme(value);
      break;
    case 2:
      var value = msg.getOptionsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool, null, "", false);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.Formatting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.Formatting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.Formatting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Formatting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheme();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptionsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
};


/**
 * optional string scheme = 1;
 * @return {string}
 */
proto.nuance.asr.v1.Formatting.prototype.getScheme = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.Formatting} returns this
 */
proto.nuance.asr.v1.Formatting.prototype.setScheme = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, bool> options = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.nuance.asr.v1.Formatting.prototype.getOptionsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.asr.v1.Formatting} returns this
 */
proto.nuance.asr.v1.Formatting.prototype.clearOptionsMap = function() {
  this.getOptionsMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.asr.v1.ControlMessage.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.nuance.asr.v1.ControlMessage.ControlMessageUnionCase = {
  CONTROL_MESSAGE_UNION_NOT_SET: 0,
  START_TIMERS_MESSAGE: 1
};

/**
 * @return {proto.nuance.asr.v1.ControlMessage.ControlMessageUnionCase}
 */
proto.nuance.asr.v1.ControlMessage.prototype.getControlMessageUnionCase = function() {
  return /** @type {proto.nuance.asr.v1.ControlMessage.ControlMessageUnionCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.ControlMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.ControlMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.ControlMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.ControlMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.ControlMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTimersMessage: (f = msg.getStartTimersMessage()) && proto.nuance.asr.v1.StartTimersControlMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.ControlMessage}
 */
proto.nuance.asr.v1.ControlMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.ControlMessage;
  return proto.nuance.asr.v1.ControlMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.ControlMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.ControlMessage}
 */
proto.nuance.asr.v1.ControlMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.asr.v1.StartTimersControlMessage;
      reader.readMessage(value,proto.nuance.asr.v1.StartTimersControlMessage.deserializeBinaryFromReader);
      msg.setStartTimersMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.ControlMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.ControlMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.ControlMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.ControlMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTimersMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.asr.v1.StartTimersControlMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional StartTimersControlMessage start_timers_message = 1;
 * @return {?proto.nuance.asr.v1.StartTimersControlMessage}
 */
proto.nuance.asr.v1.ControlMessage.prototype.getStartTimersMessage = function() {
  return /** @type{?proto.nuance.asr.v1.StartTimersControlMessage} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.StartTimersControlMessage, 1));
};


/**
 * @param {?proto.nuance.asr.v1.StartTimersControlMessage|undefined} value
 * @return {!proto.nuance.asr.v1.ControlMessage} returns this
*/
proto.nuance.asr.v1.ControlMessage.prototype.setStartTimersMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nuance.asr.v1.ControlMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.ControlMessage} returns this
 */
proto.nuance.asr.v1.ControlMessage.prototype.clearStartTimersMessage = function() {
  return this.setStartTimersMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.ControlMessage.prototype.hasStartTimersMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.StartTimersControlMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.StartTimersControlMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.StartTimersControlMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.StartTimersControlMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.StartTimersControlMessage}
 */
proto.nuance.asr.v1.StartTimersControlMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.StartTimersControlMessage;
  return proto.nuance.asr.v1.StartTimersControlMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.StartTimersControlMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.StartTimersControlMessage}
 */
proto.nuance.asr.v1.StartTimersControlMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.StartTimersControlMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.StartTimersControlMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.StartTimersControlMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.StartTimersControlMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.asr.v1.RecognitionResponse.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.nuance.asr.v1.RecognitionResponse.ResponseUnionCase = {
  RESPONSE_UNION_NOT_SET: 0,
  STATUS: 1,
  START_OF_SPEECH: 2,
  RESULT: 3
};

/**
 * @return {proto.nuance.asr.v1.RecognitionResponse.ResponseUnionCase}
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.getResponseUnionCase = function() {
  return /** @type {proto.nuance.asr.v1.RecognitionResponse.ResponseUnionCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.RecognitionResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.RecognitionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.RecognitionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.nuance.asr.v1.Status.toObject(includeInstance, f),
    startOfSpeech: (f = msg.getStartOfSpeech()) && proto.nuance.asr.v1.StartOfSpeech.toObject(includeInstance, f),
    result: (f = msg.getResult()) && nuance_asr_v1_result_pb.Result.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.RecognitionResponse}
 */
proto.nuance.asr.v1.RecognitionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.RecognitionResponse;
  return proto.nuance.asr.v1.RecognitionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.RecognitionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.RecognitionResponse}
 */
proto.nuance.asr.v1.RecognitionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.asr.v1.Status;
      reader.readMessage(value,proto.nuance.asr.v1.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.nuance.asr.v1.StartOfSpeech;
      reader.readMessage(value,proto.nuance.asr.v1.StartOfSpeech.deserializeBinaryFromReader);
      msg.setStartOfSpeech(value);
      break;
    case 3:
      var value = new nuance_asr_v1_result_pb.Result;
      reader.readMessage(value,nuance_asr_v1_result_pb.Result.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.RecognitionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.RecognitionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.RecognitionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.asr.v1.Status.serializeBinaryToWriter
    );
  }
  f = message.getStartOfSpeech();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nuance.asr.v1.StartOfSpeech.serializeBinaryToWriter
    );
  }
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      nuance_asr_v1_result_pb.Result.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.nuance.asr.v1.Status}
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.getStatus = function() {
  return /** @type{?proto.nuance.asr.v1.Status} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.Status, 1));
};


/**
 * @param {?proto.nuance.asr.v1.Status|undefined} value
 * @return {!proto.nuance.asr.v1.RecognitionResponse} returns this
*/
proto.nuance.asr.v1.RecognitionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.nuance.asr.v1.RecognitionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionResponse} returns this
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional StartOfSpeech start_of_speech = 2;
 * @return {?proto.nuance.asr.v1.StartOfSpeech}
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.getStartOfSpeech = function() {
  return /** @type{?proto.nuance.asr.v1.StartOfSpeech} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.StartOfSpeech, 2));
};


/**
 * @param {?proto.nuance.asr.v1.StartOfSpeech|undefined} value
 * @return {!proto.nuance.asr.v1.RecognitionResponse} returns this
*/
proto.nuance.asr.v1.RecognitionResponse.prototype.setStartOfSpeech = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.nuance.asr.v1.RecognitionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionResponse} returns this
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.clearStartOfSpeech = function() {
  return this.setStartOfSpeech(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.hasStartOfSpeech = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Result result = 3;
 * @return {?proto.nuance.asr.v1.Result}
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.getResult = function() {
  return /** @type{?proto.nuance.asr.v1.Result} */ (
    jspb.Message.getWrapperField(this, nuance_asr_v1_result_pb.Result, 3));
};


/**
 * @param {?proto.nuance.asr.v1.Result|undefined} value
 * @return {!proto.nuance.asr.v1.RecognitionResponse} returns this
*/
proto.nuance.asr.v1.RecognitionResponse.prototype.setResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.nuance.asr.v1.RecognitionResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.RecognitionResponse} returns this
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.clearResult = function() {
  return this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.RecognitionResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    details: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.Status}
 */
proto.nuance.asr.v1.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.Status;
  return proto.nuance.asr.v1.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.Status}
 */
proto.nuance.asr.v1.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDetails();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.nuance.asr.v1.Status.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Status} returns this
 */
proto.nuance.asr.v1.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.nuance.asr.v1.Status.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.Status} returns this
 */
proto.nuance.asr.v1.Status.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string details = 3;
 * @return {string}
 */
proto.nuance.asr.v1.Status.prototype.getDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.Status} returns this
 */
proto.nuance.asr.v1.Status.prototype.setDetails = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.StartOfSpeech.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.StartOfSpeech.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.StartOfSpeech} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.StartOfSpeech.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstAudioToStartOfSpeechMs: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.StartOfSpeech}
 */
proto.nuance.asr.v1.StartOfSpeech.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.StartOfSpeech;
  return proto.nuance.asr.v1.StartOfSpeech.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.StartOfSpeech} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.StartOfSpeech}
 */
proto.nuance.asr.v1.StartOfSpeech.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFirstAudioToStartOfSpeechMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.StartOfSpeech.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.StartOfSpeech.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.StartOfSpeech} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.StartOfSpeech.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstAudioToStartOfSpeechMs();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 first_audio_to_start_of_speech_ms = 1;
 * @return {number}
 */
proto.nuance.asr.v1.StartOfSpeech.prototype.getFirstAudioToStartOfSpeechMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.StartOfSpeech} returns this
 */
proto.nuance.asr.v1.StartOfSpeech.prototype.setFirstAudioToStartOfSpeechMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.nuance.asr.v1.EnumUtteranceDetectionMode = {
  SINGLE: 0,
  MULTIPLE: 1,
  DISABLED: 2
};

goog.object.extend(exports, proto.nuance.asr.v1);
