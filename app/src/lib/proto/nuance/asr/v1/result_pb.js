// source: nuance/asr/v1/result.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var nuance_rpc_error_details_pb = require('../../../nuance/rpc/error_details_pb.js');
goog.object.extend(proto, nuance_rpc_error_details_pb);
goog.exportSymbol('proto.nuance.asr.v1.DataPack', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Dsp', null, global);
goog.exportSymbol('proto.nuance.asr.v1.EnumResultType', null, global);
goog.exportSymbol('proto.nuance.asr.v1.EnumSeverityType', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Hypothesis', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Hypothesis.OptionalHypothesisAverageConfidenceCase', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Hypothesis.OptionalHypothesisConfidenceCase', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Hypothesis.OptionalHypothesisGrammarIdCase', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Notification', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Result', null, global);
goog.exportSymbol('proto.nuance.asr.v1.UtteranceInfo', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Word', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Word.OptionalWordConfidenceCase', null, global);
goog.exportSymbol('proto.nuance.asr.v1.Word.OptionalWordGrammarRuleCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.asr.v1.Result.repeatedFields_, null);
};
goog.inherits(proto.nuance.asr.v1.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.Result.displayName = 'proto.nuance.asr.v1.Result';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.UtteranceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.UtteranceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.UtteranceInfo.displayName = 'proto.nuance.asr.v1.UtteranceInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.Dsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.Dsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.Dsp.displayName = 'proto.nuance.asr.v1.Dsp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.Hypothesis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.asr.v1.Hypothesis.repeatedFields_, proto.nuance.asr.v1.Hypothesis.oneofGroups_);
};
goog.inherits(proto.nuance.asr.v1.Hypothesis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.Hypothesis.displayName = 'proto.nuance.asr.v1.Hypothesis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.Word = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nuance.asr.v1.Word.oneofGroups_);
};
goog.inherits(proto.nuance.asr.v1.Word, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.Word.displayName = 'proto.nuance.asr.v1.Word';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.DataPack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.DataPack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.DataPack.displayName = 'proto.nuance.asr.v1.DataPack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.asr.v1.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.asr.v1.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.asr.v1.Notification.displayName = 'proto.nuance.asr.v1.Notification';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.asr.v1.Result.repeatedFields_ = [5,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    absStartMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    absEndMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    utteranceInfo: (f = msg.getUtteranceInfo()) && proto.nuance.asr.v1.UtteranceInfo.toObject(includeInstance, f),
    hypothesesList: jspb.Message.toObjectList(msg.getHypothesesList(),
    proto.nuance.asr.v1.Hypothesis.toObject, includeInstance),
    dataPack: (f = msg.getDataPack()) && proto.nuance.asr.v1.DataPack.toObject(includeInstance, f),
    notificationsList: jspb.Message.toObjectList(msg.getNotificationsList(),
    proto.nuance.asr.v1.Notification.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.Result}
 */
proto.nuance.asr.v1.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.Result;
  return proto.nuance.asr.v1.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.Result}
 */
proto.nuance.asr.v1.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nuance.asr.v1.EnumResultType} */ (reader.readEnum());
      msg.setResultType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbsStartMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAbsEndMs(value);
      break;
    case 4:
      var value = new proto.nuance.asr.v1.UtteranceInfo;
      reader.readMessage(value,proto.nuance.asr.v1.UtteranceInfo.deserializeBinaryFromReader);
      msg.setUtteranceInfo(value);
      break;
    case 5:
      var value = new proto.nuance.asr.v1.Hypothesis;
      reader.readMessage(value,proto.nuance.asr.v1.Hypothesis.deserializeBinaryFromReader);
      msg.addHypotheses(value);
      break;
    case 6:
      var value = new proto.nuance.asr.v1.DataPack;
      reader.readMessage(value,proto.nuance.asr.v1.DataPack.deserializeBinaryFromReader);
      msg.setDataPack(value);
      break;
    case 7:
      var value = new proto.nuance.asr.v1.Notification;
      reader.readMessage(value,proto.nuance.asr.v1.Notification.deserializeBinaryFromReader);
      msg.addNotifications(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAbsStartMs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAbsEndMs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUtteranceInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nuance.asr.v1.UtteranceInfo.serializeBinaryToWriter
    );
  }
  f = message.getHypothesesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.nuance.asr.v1.Hypothesis.serializeBinaryToWriter
    );
  }
  f = message.getDataPack();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nuance.asr.v1.DataPack.serializeBinaryToWriter
    );
  }
  f = message.getNotificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.nuance.asr.v1.Notification.serializeBinaryToWriter
    );
  }
};


/**
 * optional EnumResultType result_type = 1;
 * @return {!proto.nuance.asr.v1.EnumResultType}
 */
proto.nuance.asr.v1.Result.prototype.getResultType = function() {
  return /** @type {!proto.nuance.asr.v1.EnumResultType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.nuance.asr.v1.EnumResultType} value
 * @return {!proto.nuance.asr.v1.Result} returns this
 */
proto.nuance.asr.v1.Result.prototype.setResultType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint32 abs_start_ms = 2;
 * @return {number}
 */
proto.nuance.asr.v1.Result.prototype.getAbsStartMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Result} returns this
 */
proto.nuance.asr.v1.Result.prototype.setAbsStartMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 abs_end_ms = 3;
 * @return {number}
 */
proto.nuance.asr.v1.Result.prototype.getAbsEndMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Result} returns this
 */
proto.nuance.asr.v1.Result.prototype.setAbsEndMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional UtteranceInfo utterance_info = 4;
 * @return {?proto.nuance.asr.v1.UtteranceInfo}
 */
proto.nuance.asr.v1.Result.prototype.getUtteranceInfo = function() {
  return /** @type{?proto.nuance.asr.v1.UtteranceInfo} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.UtteranceInfo, 4));
};


/**
 * @param {?proto.nuance.asr.v1.UtteranceInfo|undefined} value
 * @return {!proto.nuance.asr.v1.Result} returns this
*/
proto.nuance.asr.v1.Result.prototype.setUtteranceInfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.Result} returns this
 */
proto.nuance.asr.v1.Result.prototype.clearUtteranceInfo = function() {
  return this.setUtteranceInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.Result.prototype.hasUtteranceInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Hypothesis hypotheses = 5;
 * @return {!Array<!proto.nuance.asr.v1.Hypothesis>}
 */
proto.nuance.asr.v1.Result.prototype.getHypothesesList = function() {
  return /** @type{!Array<!proto.nuance.asr.v1.Hypothesis>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.asr.v1.Hypothesis, 5));
};


/**
 * @param {!Array<!proto.nuance.asr.v1.Hypothesis>} value
 * @return {!proto.nuance.asr.v1.Result} returns this
*/
proto.nuance.asr.v1.Result.prototype.setHypothesesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.nuance.asr.v1.Hypothesis=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.asr.v1.Hypothesis}
 */
proto.nuance.asr.v1.Result.prototype.addHypotheses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.nuance.asr.v1.Hypothesis, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuance.asr.v1.Result} returns this
 */
proto.nuance.asr.v1.Result.prototype.clearHypothesesList = function() {
  return this.setHypothesesList([]);
};


/**
 * optional DataPack data_pack = 6;
 * @return {?proto.nuance.asr.v1.DataPack}
 */
proto.nuance.asr.v1.Result.prototype.getDataPack = function() {
  return /** @type{?proto.nuance.asr.v1.DataPack} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.DataPack, 6));
};


/**
 * @param {?proto.nuance.asr.v1.DataPack|undefined} value
 * @return {!proto.nuance.asr.v1.Result} returns this
*/
proto.nuance.asr.v1.Result.prototype.setDataPack = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.Result} returns this
 */
proto.nuance.asr.v1.Result.prototype.clearDataPack = function() {
  return this.setDataPack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.Result.prototype.hasDataPack = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Notification notifications = 7;
 * @return {!Array<!proto.nuance.asr.v1.Notification>}
 */
proto.nuance.asr.v1.Result.prototype.getNotificationsList = function() {
  return /** @type{!Array<!proto.nuance.asr.v1.Notification>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.asr.v1.Notification, 7));
};


/**
 * @param {!Array<!proto.nuance.asr.v1.Notification>} value
 * @return {!proto.nuance.asr.v1.Result} returns this
*/
proto.nuance.asr.v1.Result.prototype.setNotificationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.nuance.asr.v1.Notification=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.asr.v1.Notification}
 */
proto.nuance.asr.v1.Result.prototype.addNotifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.nuance.asr.v1.Notification, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuance.asr.v1.Result} returns this
 */
proto.nuance.asr.v1.Result.prototype.clearNotificationsList = function() {
  return this.setNotificationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.UtteranceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.UtteranceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.UtteranceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    durationMs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clippingDurationMs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    droppedSpeechPackets: jspb.Message.getFieldWithDefault(msg, 3, 0),
    droppedNonspeechPackets: jspb.Message.getFieldWithDefault(msg, 4, 0),
    dsp: (f = msg.getDsp()) && proto.nuance.asr.v1.Dsp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.UtteranceInfo}
 */
proto.nuance.asr.v1.UtteranceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.UtteranceInfo;
  return proto.nuance.asr.v1.UtteranceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.UtteranceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.UtteranceInfo}
 */
proto.nuance.asr.v1.UtteranceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDurationMs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClippingDurationMs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedSpeechPackets(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDroppedNonspeechPackets(value);
      break;
    case 5:
      var value = new proto.nuance.asr.v1.Dsp;
      reader.readMessage(value,proto.nuance.asr.v1.Dsp.deserializeBinaryFromReader);
      msg.setDsp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.UtteranceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.UtteranceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.UtteranceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDurationMs();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClippingDurationMs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDroppedSpeechPackets();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDroppedNonspeechPackets();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDsp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nuance.asr.v1.Dsp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 duration_ms = 1;
 * @return {number}
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.getDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.UtteranceInfo} returns this
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.setDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 clipping_duration_ms = 2;
 * @return {number}
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.getClippingDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.UtteranceInfo} returns this
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.setClippingDurationMs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 dropped_speech_packets = 3;
 * @return {number}
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.getDroppedSpeechPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.UtteranceInfo} returns this
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.setDroppedSpeechPackets = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 dropped_nonspeech_packets = 4;
 * @return {number}
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.getDroppedNonspeechPackets = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.UtteranceInfo} returns this
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.setDroppedNonspeechPackets = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Dsp dsp = 5;
 * @return {?proto.nuance.asr.v1.Dsp}
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.getDsp = function() {
  return /** @type{?proto.nuance.asr.v1.Dsp} */ (
    jspb.Message.getWrapperField(this, proto.nuance.asr.v1.Dsp, 5));
};


/**
 * @param {?proto.nuance.asr.v1.Dsp|undefined} value
 * @return {!proto.nuance.asr.v1.UtteranceInfo} returns this
*/
proto.nuance.asr.v1.UtteranceInfo.prototype.setDsp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.UtteranceInfo} returns this
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.clearDsp = function() {
  return this.setDsp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.UtteranceInfo.prototype.hasDsp = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.Dsp.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.Dsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.Dsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Dsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    snrEstimateDb: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    level: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    numChannels: jspb.Message.getFieldWithDefault(msg, 3, 0),
    initialSilenceMs: jspb.Message.getFieldWithDefault(msg, 4, 0),
    initialEnergy: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    finalEnergy: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    meanEnergy: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.Dsp}
 */
proto.nuance.asr.v1.Dsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.Dsp;
  return proto.nuance.asr.v1.Dsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.Dsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.Dsp}
 */
proto.nuance.asr.v1.Dsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSnrEstimateDb(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumChannels(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInitialSilenceMs(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInitialEnergy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFinalEnergy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanEnergy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.Dsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.Dsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.Dsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Dsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnrEstimateDb();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getNumChannels();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getInitialSilenceMs();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getInitialEnergy();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getFinalEnergy();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getMeanEnergy();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional float snr_estimate_db = 1;
 * @return {number}
 */
proto.nuance.asr.v1.Dsp.prototype.getSnrEstimateDb = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Dsp} returns this
 */
proto.nuance.asr.v1.Dsp.prototype.setSnrEstimateDb = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float level = 2;
 * @return {number}
 */
proto.nuance.asr.v1.Dsp.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Dsp} returns this
 */
proto.nuance.asr.v1.Dsp.prototype.setLevel = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 num_channels = 3;
 * @return {number}
 */
proto.nuance.asr.v1.Dsp.prototype.getNumChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Dsp} returns this
 */
proto.nuance.asr.v1.Dsp.prototype.setNumChannels = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 initial_silence_ms = 4;
 * @return {number}
 */
proto.nuance.asr.v1.Dsp.prototype.getInitialSilenceMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Dsp} returns this
 */
proto.nuance.asr.v1.Dsp.prototype.setInitialSilenceMs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float initial_energy = 5;
 * @return {number}
 */
proto.nuance.asr.v1.Dsp.prototype.getInitialEnergy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Dsp} returns this
 */
proto.nuance.asr.v1.Dsp.prototype.setInitialEnergy = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float final_energy = 6;
 * @return {number}
 */
proto.nuance.asr.v1.Dsp.prototype.getFinalEnergy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Dsp} returns this
 */
proto.nuance.asr.v1.Dsp.prototype.setFinalEnergy = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float mean_energy = 7;
 * @return {number}
 */
proto.nuance.asr.v1.Dsp.prototype.getMeanEnergy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Dsp} returns this
 */
proto.nuance.asr.v1.Dsp.prototype.setMeanEnergy = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.asr.v1.Hypothesis.repeatedFields_ = [6];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.asr.v1.Hypothesis.oneofGroups_ = [[1],[2],[9]];

/**
 * @enum {number}
 */
proto.nuance.asr.v1.Hypothesis.OptionalHypothesisConfidenceCase = {
  OPTIONAL_HYPOTHESIS_CONFIDENCE_NOT_SET: 0,
  CONFIDENCE: 1
};

/**
 * @return {proto.nuance.asr.v1.Hypothesis.OptionalHypothesisConfidenceCase}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getOptionalHypothesisConfidenceCase = function() {
  return /** @type {proto.nuance.asr.v1.Hypothesis.OptionalHypothesisConfidenceCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.Hypothesis.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.nuance.asr.v1.Hypothesis.OptionalHypothesisAverageConfidenceCase = {
  OPTIONAL_HYPOTHESIS_AVERAGE_CONFIDENCE_NOT_SET: 0,
  AVERAGE_CONFIDENCE: 2
};

/**
 * @return {proto.nuance.asr.v1.Hypothesis.OptionalHypothesisAverageConfidenceCase}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getOptionalHypothesisAverageConfidenceCase = function() {
  return /** @type {proto.nuance.asr.v1.Hypothesis.OptionalHypothesisAverageConfidenceCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.Hypothesis.oneofGroups_[1]));
};

/**
 * @enum {number}
 */
proto.nuance.asr.v1.Hypothesis.OptionalHypothesisGrammarIdCase = {
  OPTIONAL_HYPOTHESIS_GRAMMAR_ID_NOT_SET: 0,
  GRAMMAR_ID: 9
};

/**
 * @return {proto.nuance.asr.v1.Hypothesis.OptionalHypothesisGrammarIdCase}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getOptionalHypothesisGrammarIdCase = function() {
  return /** @type {proto.nuance.asr.v1.Hypothesis.OptionalHypothesisGrammarIdCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.Hypothesis.oneofGroups_[2]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.Hypothesis.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.Hypothesis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.Hypothesis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Hypothesis.toObject = function(includeInstance, msg) {
  var f, obj = {
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    averageConfidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    rejected: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    formattedText: jspb.Message.getFieldWithDefault(msg, 4, ""),
    minimallyFormattedText: jspb.Message.getFieldWithDefault(msg, 5, ""),
    wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.nuance.asr.v1.Word.toObject, includeInstance),
    encryptedTokenization: jspb.Message.getFieldWithDefault(msg, 7, ""),
    grammarId: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.Hypothesis}
 */
proto.nuance.asr.v1.Hypothesis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.Hypothesis;
  return proto.nuance.asr.v1.Hypothesis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.Hypothesis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.Hypothesis}
 */
proto.nuance.asr.v1.Hypothesis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAverageConfidence(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRejected(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormattedText(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinimallyFormattedText(value);
      break;
    case 6:
      var value = new proto.nuance.asr.v1.Word;
      reader.readMessage(value,proto.nuance.asr.v1.Word.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncryptedTokenization(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrammarId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.Hypothesis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.Hypothesis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.Hypothesis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Hypothesis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRejected();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getFormattedText();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMinimallyFormattedText();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.nuance.asr.v1.Word.serializeBinaryToWriter
    );
  }
  f = message.getEncryptedTokenization();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional float confidence = 1;
 * @return {number}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.setConfidence = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.nuance.asr.v1.Hypothesis.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.clearConfidence = function() {
  return jspb.Message.setOneofField(this, 1, proto.nuance.asr.v1.Hypothesis.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.Hypothesis.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float average_confidence = 2;
 * @return {number}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getAverageConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.setAverageConfidence = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.nuance.asr.v1.Hypothesis.oneofGroups_[1], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.clearAverageConfidence = function() {
  return jspb.Message.setOneofField(this, 2, proto.nuance.asr.v1.Hypothesis.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.Hypothesis.prototype.hasAverageConfidence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool rejected = 3;
 * @return {boolean}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getRejected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.setRejected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional string formatted_text = 4;
 * @return {string}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getFormattedText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.setFormattedText = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string minimally_formatted_text = 5;
 * @return {string}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getMinimallyFormattedText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.setMinimallyFormattedText = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Word words = 6;
 * @return {!Array<!proto.nuance.asr.v1.Word>}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.nuance.asr.v1.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.asr.v1.Word, 6));
};


/**
 * @param {!Array<!proto.nuance.asr.v1.Word>} value
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
*/
proto.nuance.asr.v1.Hypothesis.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.nuance.asr.v1.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.asr.v1.Word}
 */
proto.nuance.asr.v1.Hypothesis.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.nuance.asr.v1.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};


/**
 * optional string encrypted_tokenization = 7;
 * @return {string}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getEncryptedTokenization = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.setEncryptedTokenization = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string grammar_id = 9;
 * @return {string}
 */
proto.nuance.asr.v1.Hypothesis.prototype.getGrammarId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.setGrammarId = function(value) {
  return jspb.Message.setOneofField(this, 9, proto.nuance.asr.v1.Hypothesis.oneofGroups_[2], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.asr.v1.Hypothesis} returns this
 */
proto.nuance.asr.v1.Hypothesis.prototype.clearGrammarId = function() {
  return jspb.Message.setOneofField(this, 9, proto.nuance.asr.v1.Hypothesis.oneofGroups_[2], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.Hypothesis.prototype.hasGrammarId = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nuance.asr.v1.Word.oneofGroups_ = [[2],[6]];

/**
 * @enum {number}
 */
proto.nuance.asr.v1.Word.OptionalWordConfidenceCase = {
  OPTIONAL_WORD_CONFIDENCE_NOT_SET: 0,
  CONFIDENCE: 2
};

/**
 * @return {proto.nuance.asr.v1.Word.OptionalWordConfidenceCase}
 */
proto.nuance.asr.v1.Word.prototype.getOptionalWordConfidenceCase = function() {
  return /** @type {proto.nuance.asr.v1.Word.OptionalWordConfidenceCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.Word.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.nuance.asr.v1.Word.OptionalWordGrammarRuleCase = {
  OPTIONAL_WORD_GRAMMAR_RULE_NOT_SET: 0,
  GRAMMAR_RULE: 6
};

/**
 * @return {proto.nuance.asr.v1.Word.OptionalWordGrammarRuleCase}
 */
proto.nuance.asr.v1.Word.prototype.getOptionalWordGrammarRuleCase = function() {
  return /** @type {proto.nuance.asr.v1.Word.OptionalWordGrammarRuleCase} */(jspb.Message.computeOneofCase(this, proto.nuance.asr.v1.Word.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.Word.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.Word.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.Word} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Word.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    confidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    startMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endMs: jspb.Message.getFieldWithDefault(msg, 4, 0),
    silenceAfterWordMs: jspb.Message.getFieldWithDefault(msg, 5, 0),
    grammarRule: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.Word}
 */
proto.nuance.asr.v1.Word.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.Word;
  return proto.nuance.asr.v1.Word.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.Word} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.Word}
 */
proto.nuance.asr.v1.Word.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartMs(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndMs(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSilenceAfterWordMs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setGrammarRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.Word.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.Word.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.Word} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Word.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getStartMs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEndMs();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSilenceAfterWordMs();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.nuance.asr.v1.Word.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.Word} returns this
 */
proto.nuance.asr.v1.Word.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float confidence = 2;
 * @return {number}
 */
proto.nuance.asr.v1.Word.prototype.getConfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Word} returns this
 */
proto.nuance.asr.v1.Word.prototype.setConfidence = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.nuance.asr.v1.Word.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.asr.v1.Word} returns this
 */
proto.nuance.asr.v1.Word.prototype.clearConfidence = function() {
  return jspb.Message.setOneofField(this, 2, proto.nuance.asr.v1.Word.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.Word.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 start_ms = 3;
 * @return {number}
 */
proto.nuance.asr.v1.Word.prototype.getStartMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Word} returns this
 */
proto.nuance.asr.v1.Word.prototype.setStartMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 end_ms = 4;
 * @return {number}
 */
proto.nuance.asr.v1.Word.prototype.getEndMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Word} returns this
 */
proto.nuance.asr.v1.Word.prototype.setEndMs = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 silence_after_word_ms = 5;
 * @return {number}
 */
proto.nuance.asr.v1.Word.prototype.getSilenceAfterWordMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Word} returns this
 */
proto.nuance.asr.v1.Word.prototype.setSilenceAfterWordMs = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string grammar_rule = 6;
 * @return {string}
 */
proto.nuance.asr.v1.Word.prototype.getGrammarRule = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.Word} returns this
 */
proto.nuance.asr.v1.Word.prototype.setGrammarRule = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.nuance.asr.v1.Word.oneofGroups_[1], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.nuance.asr.v1.Word} returns this
 */
proto.nuance.asr.v1.Word.prototype.clearGrammarRule = function() {
  return jspb.Message.setOneofField(this, 6, proto.nuance.asr.v1.Word.oneofGroups_[1], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.Word.prototype.hasGrammarRule = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.DataPack.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.DataPack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.DataPack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.DataPack.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getFieldWithDefault(msg, 1, ""),
    topic: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.DataPack}
 */
proto.nuance.asr.v1.DataPack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.DataPack;
  return proto.nuance.asr.v1.DataPack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.DataPack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.DataPack}
 */
proto.nuance.asr.v1.DataPack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopic(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.DataPack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.DataPack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.DataPack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.DataPack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTopic();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string language = 1;
 * @return {string}
 */
proto.nuance.asr.v1.DataPack.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.DataPack} returns this
 */
proto.nuance.asr.v1.DataPack.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string topic = 2;
 * @return {string}
 */
proto.nuance.asr.v1.DataPack.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.DataPack} returns this
 */
proto.nuance.asr.v1.DataPack.prototype.setTopic = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.nuance.asr.v1.DataPack.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.DataPack} returns this
 */
proto.nuance.asr.v1.DataPack.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.nuance.asr.v1.DataPack.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.asr.v1.DataPack} returns this
 */
proto.nuance.asr.v1.DataPack.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.asr.v1.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.asr.v1.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.asr.v1.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    severity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: (f = msg.getMessage()) && nuance_rpc_error_details_pb.LocalizedMessage.toObject(includeInstance, f),
    dataMap: (f = msg.getDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.asr.v1.Notification}
 */
proto.nuance.asr.v1.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.asr.v1.Notification;
  return proto.nuance.asr.v1.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.asr.v1.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.asr.v1.Notification}
 */
proto.nuance.asr.v1.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!proto.nuance.asr.v1.EnumSeverityType} */ (reader.readEnum());
      msg.setSeverity(value);
      break;
    case 3:
      var value = new nuance_rpc_error_details_pb.LocalizedMessage;
      reader.readMessage(value,nuance_rpc_error_details_pb.LocalizedMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 4:
      var value = msg.getDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.asr.v1.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.asr.v1.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.asr.v1.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.asr.v1.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSeverity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      nuance_rpc_error_details_pb.LocalizedMessage.serializeBinaryToWriter
    );
  }
  f = message.getDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.nuance.asr.v1.Notification.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.asr.v1.Notification} returns this
 */
proto.nuance.asr.v1.Notification.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional EnumSeverityType severity = 2;
 * @return {!proto.nuance.asr.v1.EnumSeverityType}
 */
proto.nuance.asr.v1.Notification.prototype.getSeverity = function() {
  return /** @type {!proto.nuance.asr.v1.EnumSeverityType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.nuance.asr.v1.EnumSeverityType} value
 * @return {!proto.nuance.asr.v1.Notification} returns this
 */
proto.nuance.asr.v1.Notification.prototype.setSeverity = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional nuance.rpc.LocalizedMessage message = 3;
 * @return {?proto.nuance.rpc.LocalizedMessage}
 */
proto.nuance.asr.v1.Notification.prototype.getMessage = function() {
  return /** @type{?proto.nuance.rpc.LocalizedMessage} */ (
    jspb.Message.getWrapperField(this, nuance_rpc_error_details_pb.LocalizedMessage, 3));
};


/**
 * @param {?proto.nuance.rpc.LocalizedMessage|undefined} value
 * @return {!proto.nuance.asr.v1.Notification} returns this
*/
proto.nuance.asr.v1.Notification.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.asr.v1.Notification} returns this
 */
proto.nuance.asr.v1.Notification.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.asr.v1.Notification.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, string> data = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.asr.v1.Notification.prototype.getDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.asr.v1.Notification} returns this
 */
proto.nuance.asr.v1.Notification.prototype.clearDataMap = function() {
  this.getDataMap().clear();
  return this;};


/**
 * @enum {number}
 */
proto.nuance.asr.v1.EnumResultType = {
  FINAL: 0,
  PARTIAL: 1,
  IMMUTABLE_PARTIAL: 2
};

/**
 * @enum {number}
 */
proto.nuance.asr.v1.EnumSeverityType = {
  SEVERITY_UNKNOWN: 0,
  SEVERITY_ERROR: 10,
  SEVERITY_WARNING: 20,
  SEVERITY_INFO: 30
};

goog.object.extend(exports, proto.nuance.asr.v1);
