// source: nuance/rpc/error_details.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.nuance.rpc.FieldViolation', null, global);
goog.exportSymbol('proto.nuance.rpc.FieldViolation.ViolationType', null, global);
goog.exportSymbol('proto.nuance.rpc.HelpInfo', null, global);
goog.exportSymbol('proto.nuance.rpc.HelpInfo.Hyperlink', null, global);
goog.exportSymbol('proto.nuance.rpc.LocalizedMessage', null, global);
goog.exportSymbol('proto.nuance.rpc.RequestInfo', null, global);
goog.exportSymbol('proto.nuance.rpc.RetryInfo', null, global);
goog.exportSymbol('proto.nuance.rpc.StatusDetail', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.rpc.RetryInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.rpc.RetryInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.rpc.RetryInfo.displayName = 'proto.nuance.rpc.RetryInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.rpc.RequestInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.rpc.RequestInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.rpc.RequestInfo.displayName = 'proto.nuance.rpc.RequestInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.rpc.HelpInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.rpc.HelpInfo.repeatedFields_, null);
};
goog.inherits(proto.nuance.rpc.HelpInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.rpc.HelpInfo.displayName = 'proto.nuance.rpc.HelpInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.rpc.HelpInfo.Hyperlink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.rpc.HelpInfo.Hyperlink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.rpc.HelpInfo.Hyperlink.displayName = 'proto.nuance.rpc.HelpInfo.Hyperlink';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.rpc.LocalizedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.rpc.LocalizedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.rpc.LocalizedMessage.displayName = 'proto.nuance.rpc.LocalizedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.rpc.FieldViolation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nuance.rpc.FieldViolation.repeatedFields_, null);
};
goog.inherits(proto.nuance.rpc.FieldViolation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.rpc.FieldViolation.displayName = 'proto.nuance.rpc.FieldViolation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nuance.rpc.StatusDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nuance.rpc.StatusDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nuance.rpc.StatusDetail.displayName = 'proto.nuance.rpc.StatusDetail';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.rpc.RetryInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.rpc.RetryInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.rpc.RetryInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.RetryInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    retryDelayMs: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.rpc.RetryInfo}
 */
proto.nuance.rpc.RetryInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.rpc.RetryInfo;
  return proto.nuance.rpc.RetryInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.rpc.RetryInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.rpc.RetryInfo}
 */
proto.nuance.rpc.RetryInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRetryDelayMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.rpc.RetryInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.rpc.RetryInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.rpc.RetryInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.RetryInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRetryDelayMs();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 retry_delay_ms = 1;
 * @return {number}
 */
proto.nuance.rpc.RetryInfo.prototype.getRetryDelayMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.nuance.rpc.RetryInfo} returns this
 */
proto.nuance.rpc.RetryInfo.prototype.setRetryDelayMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.rpc.RequestInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.rpc.RequestInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.rpc.RequestInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.RequestInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestData: jspb.Message.getFieldWithDefault(msg, 2, ""),
    additionalRequestDataMap: (f = msg.getAdditionalRequestDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.rpc.RequestInfo}
 */
proto.nuance.rpc.RequestInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.rpc.RequestInfo;
  return proto.nuance.rpc.RequestInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.rpc.RequestInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.rpc.RequestInfo}
 */
proto.nuance.rpc.RequestInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestData(value);
      break;
    case 3:
      var value = msg.getAdditionalRequestDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.rpc.RequestInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.rpc.RequestInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.rpc.RequestInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.RequestInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAdditionalRequestDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string request_id = 1;
 * @return {string}
 */
proto.nuance.rpc.RequestInfo.prototype.getRequestId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.RequestInfo} returns this
 */
proto.nuance.rpc.RequestInfo.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request_data = 2;
 * @return {string}
 */
proto.nuance.rpc.RequestInfo.prototype.getRequestData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.RequestInfo} returns this
 */
proto.nuance.rpc.RequestInfo.prototype.setRequestData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> additional_request_data = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.rpc.RequestInfo.prototype.getAdditionalRequestDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.rpc.RequestInfo} returns this
 */
proto.nuance.rpc.RequestInfo.prototype.clearAdditionalRequestDataMap = function() {
  this.getAdditionalRequestDataMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.rpc.HelpInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.rpc.HelpInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.rpc.HelpInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.rpc.HelpInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.HelpInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    linksList: jspb.Message.toObjectList(msg.getLinksList(),
    proto.nuance.rpc.HelpInfo.Hyperlink.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.rpc.HelpInfo}
 */
proto.nuance.rpc.HelpInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.rpc.HelpInfo;
  return proto.nuance.rpc.HelpInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.rpc.HelpInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.rpc.HelpInfo}
 */
proto.nuance.rpc.HelpInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.rpc.HelpInfo.Hyperlink;
      reader.readMessage(value,proto.nuance.rpc.HelpInfo.Hyperlink.deserializeBinaryFromReader);
      msg.addLinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.rpc.HelpInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.rpc.HelpInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.rpc.HelpInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.HelpInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nuance.rpc.HelpInfo.Hyperlink.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.rpc.HelpInfo.Hyperlink.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.rpc.HelpInfo.Hyperlink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.rpc.HelpInfo.Hyperlink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.HelpInfo.Hyperlink.toObject = function(includeInstance, msg) {
  var f, obj = {
    description: (f = msg.getDescription()) && proto.nuance.rpc.LocalizedMessage.toObject(includeInstance, f),
    url: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.rpc.HelpInfo.Hyperlink}
 */
proto.nuance.rpc.HelpInfo.Hyperlink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.rpc.HelpInfo.Hyperlink;
  return proto.nuance.rpc.HelpInfo.Hyperlink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.rpc.HelpInfo.Hyperlink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.rpc.HelpInfo.Hyperlink}
 */
proto.nuance.rpc.HelpInfo.Hyperlink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nuance.rpc.LocalizedMessage;
      reader.readMessage(value,proto.nuance.rpc.LocalizedMessage.deserializeBinaryFromReader);
      msg.setDescription(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.rpc.HelpInfo.Hyperlink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.rpc.HelpInfo.Hyperlink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.rpc.HelpInfo.Hyperlink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.HelpInfo.Hyperlink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDescription();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nuance.rpc.LocalizedMessage.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional LocalizedMessage description = 1;
 * @return {?proto.nuance.rpc.LocalizedMessage}
 */
proto.nuance.rpc.HelpInfo.Hyperlink.prototype.getDescription = function() {
  return /** @type{?proto.nuance.rpc.LocalizedMessage} */ (
    jspb.Message.getWrapperField(this, proto.nuance.rpc.LocalizedMessage, 1));
};


/**
 * @param {?proto.nuance.rpc.LocalizedMessage|undefined} value
 * @return {!proto.nuance.rpc.HelpInfo.Hyperlink} returns this
*/
proto.nuance.rpc.HelpInfo.Hyperlink.prototype.setDescription = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.rpc.HelpInfo.Hyperlink} returns this
 */
proto.nuance.rpc.HelpInfo.Hyperlink.prototype.clearDescription = function() {
  return this.setDescription(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.rpc.HelpInfo.Hyperlink.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.nuance.rpc.HelpInfo.Hyperlink.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.HelpInfo.Hyperlink} returns this
 */
proto.nuance.rpc.HelpInfo.Hyperlink.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Hyperlink links = 1;
 * @return {!Array<!proto.nuance.rpc.HelpInfo.Hyperlink>}
 */
proto.nuance.rpc.HelpInfo.prototype.getLinksList = function() {
  return /** @type{!Array<!proto.nuance.rpc.HelpInfo.Hyperlink>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nuance.rpc.HelpInfo.Hyperlink, 1));
};


/**
 * @param {!Array<!proto.nuance.rpc.HelpInfo.Hyperlink>} value
 * @return {!proto.nuance.rpc.HelpInfo} returns this
*/
proto.nuance.rpc.HelpInfo.prototype.setLinksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nuance.rpc.HelpInfo.Hyperlink=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nuance.rpc.HelpInfo.Hyperlink}
 */
proto.nuance.rpc.HelpInfo.prototype.addLinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nuance.rpc.HelpInfo.Hyperlink, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuance.rpc.HelpInfo} returns this
 */
proto.nuance.rpc.HelpInfo.prototype.clearLinksList = function() {
  return this.setLinksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.rpc.LocalizedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.rpc.LocalizedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.rpc.LocalizedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.LocalizedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    locale: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    messageResourceId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.rpc.LocalizedMessage}
 */
proto.nuance.rpc.LocalizedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.rpc.LocalizedMessage;
  return proto.nuance.rpc.LocalizedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.rpc.LocalizedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.rpc.LocalizedMessage}
 */
proto.nuance.rpc.LocalizedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocale(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageResourceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.rpc.LocalizedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.rpc.LocalizedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.rpc.LocalizedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.LocalizedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocale();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessageResourceId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string locale = 1;
 * @return {string}
 */
proto.nuance.rpc.LocalizedMessage.prototype.getLocale = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.LocalizedMessage} returns this
 */
proto.nuance.rpc.LocalizedMessage.prototype.setLocale = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.nuance.rpc.LocalizedMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.LocalizedMessage} returns this
 */
proto.nuance.rpc.LocalizedMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message_resource_id = 3;
 * @return {string}
 */
proto.nuance.rpc.LocalizedMessage.prototype.getMessageResourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.LocalizedMessage} returns this
 */
proto.nuance.rpc.LocalizedMessage.prototype.setMessageResourceId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nuance.rpc.FieldViolation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.rpc.FieldViolation.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.rpc.FieldViolation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.rpc.FieldViolation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.FieldViolation.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: jspb.Message.getFieldWithDefault(msg, 1, ""),
    relFieldList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    userMessage: (f = msg.getUserMessage()) && proto.nuance.rpc.LocalizedMessage.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    invalidValue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    violation: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.rpc.FieldViolation}
 */
proto.nuance.rpc.FieldViolation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.rpc.FieldViolation;
  return proto.nuance.rpc.FieldViolation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.rpc.FieldViolation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.rpc.FieldViolation}
 */
proto.nuance.rpc.FieldViolation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRelField(value);
      break;
    case 3:
      var value = new proto.nuance.rpc.LocalizedMessage;
      reader.readMessage(value,proto.nuance.rpc.LocalizedMessage.deserializeBinaryFromReader);
      msg.setUserMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInvalidValue(value);
      break;
    case 6:
      var value = /** @type {!proto.nuance.rpc.FieldViolation.ViolationType} */ (reader.readEnum());
      msg.setViolation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.rpc.FieldViolation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.rpc.FieldViolation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.rpc.FieldViolation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.FieldViolation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRelFieldList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getUserMessage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nuance.rpc.LocalizedMessage.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInvalidValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getViolation();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.nuance.rpc.FieldViolation.ViolationType = {
  MANDATORY_FIELD_MISSING: 0,
  FIELD_CONFLICT: 1,
  OUT_OF_RANGE: 2,
  INVALID_FORMAT: 3,
  TOO_SHORT: 4,
  TOO_LONG: 5,
  OTHER: 64,
  UNSPECIFIED: 99
};

/**
 * optional string field = 1;
 * @return {string}
 */
proto.nuance.rpc.FieldViolation.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.FieldViolation} returns this
 */
proto.nuance.rpc.FieldViolation.prototype.setField = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string rel_field = 2;
 * @return {!Array<string>}
 */
proto.nuance.rpc.FieldViolation.prototype.getRelFieldList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nuance.rpc.FieldViolation} returns this
 */
proto.nuance.rpc.FieldViolation.prototype.setRelFieldList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nuance.rpc.FieldViolation} returns this
 */
proto.nuance.rpc.FieldViolation.prototype.addRelField = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nuance.rpc.FieldViolation} returns this
 */
proto.nuance.rpc.FieldViolation.prototype.clearRelFieldList = function() {
  return this.setRelFieldList([]);
};


/**
 * optional LocalizedMessage user_message = 3;
 * @return {?proto.nuance.rpc.LocalizedMessage}
 */
proto.nuance.rpc.FieldViolation.prototype.getUserMessage = function() {
  return /** @type{?proto.nuance.rpc.LocalizedMessage} */ (
    jspb.Message.getWrapperField(this, proto.nuance.rpc.LocalizedMessage, 3));
};


/**
 * @param {?proto.nuance.rpc.LocalizedMessage|undefined} value
 * @return {!proto.nuance.rpc.FieldViolation} returns this
*/
proto.nuance.rpc.FieldViolation.prototype.setUserMessage = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.rpc.FieldViolation} returns this
 */
proto.nuance.rpc.FieldViolation.prototype.clearUserMessage = function() {
  return this.setUserMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.rpc.FieldViolation.prototype.hasUserMessage = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.nuance.rpc.FieldViolation.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.FieldViolation} returns this
 */
proto.nuance.rpc.FieldViolation.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string invalid_value = 5;
 * @return {string}
 */
proto.nuance.rpc.FieldViolation.prototype.getInvalidValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.FieldViolation} returns this
 */
proto.nuance.rpc.FieldViolation.prototype.setInvalidValue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional ViolationType violation = 6;
 * @return {!proto.nuance.rpc.FieldViolation.ViolationType}
 */
proto.nuance.rpc.FieldViolation.prototype.getViolation = function() {
  return /** @type {!proto.nuance.rpc.FieldViolation.ViolationType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.nuance.rpc.FieldViolation.ViolationType} value
 * @return {!proto.nuance.rpc.FieldViolation} returns this
 */
proto.nuance.rpc.FieldViolation.prototype.setViolation = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nuance.rpc.StatusDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.nuance.rpc.StatusDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nuance.rpc.StatusDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.StatusDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userMessage: (f = msg.getUserMessage()) && proto.nuance.rpc.LocalizedMessage.toObject(includeInstance, f),
    extrasMap: (f = msg.getExtrasMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nuance.rpc.StatusDetail}
 */
proto.nuance.rpc.StatusDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nuance.rpc.StatusDetail;
  return proto.nuance.rpc.StatusDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nuance.rpc.StatusDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nuance.rpc.StatusDetail}
 */
proto.nuance.rpc.StatusDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 2:
      var value = new proto.nuance.rpc.LocalizedMessage;
      reader.readMessage(value,proto.nuance.rpc.LocalizedMessage.deserializeBinaryFromReader);
      msg.setUserMessage(value);
      break;
    case 3:
      var value = msg.getExtrasMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nuance.rpc.StatusDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nuance.rpc.StatusDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nuance.rpc.StatusDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nuance.rpc.StatusDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nuance.rpc.LocalizedMessage.serializeBinaryToWriter
    );
  }
  f = message.getExtrasMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.nuance.rpc.StatusDetail.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nuance.rpc.StatusDetail} returns this
 */
proto.nuance.rpc.StatusDetail.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional LocalizedMessage user_message = 2;
 * @return {?proto.nuance.rpc.LocalizedMessage}
 */
proto.nuance.rpc.StatusDetail.prototype.getUserMessage = function() {
  return /** @type{?proto.nuance.rpc.LocalizedMessage} */ (
    jspb.Message.getWrapperField(this, proto.nuance.rpc.LocalizedMessage, 2));
};


/**
 * @param {?proto.nuance.rpc.LocalizedMessage|undefined} value
 * @return {!proto.nuance.rpc.StatusDetail} returns this
*/
proto.nuance.rpc.StatusDetail.prototype.setUserMessage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nuance.rpc.StatusDetail} returns this
 */
proto.nuance.rpc.StatusDetail.prototype.clearUserMessage = function() {
  return this.setUserMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nuance.rpc.StatusDetail.prototype.hasUserMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * map<string, string> extras = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nuance.rpc.StatusDetail.prototype.getExtrasMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.nuance.rpc.StatusDetail} returns this
 */
proto.nuance.rpc.StatusDetail.prototype.clearExtrasMap = function() {
  this.getExtrasMap().clear();
  return this;};


goog.object.extend(exports, proto.nuance.rpc);
